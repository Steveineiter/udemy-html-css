/* Universal selector selects all elements on page, this isnt going to be inherited. 
Has lowest priority and will easily be overwrited */
* {
  /* border-top: 10px solid #1098ad; */

  /* Nice to remove all maring and padding, this is quite 
  common (many projects start with removing those) */
  margin: 0;
  padding: 0;
}

/* ===== PAGE SECTIONS  */
/* This is inheritance, this is not selecting. We declear values for 
properties and then they will be passed down to childs. Many styles will NOT be inherited. 
Eg border top, this would be very inpraticial.*/
body {
  color: #444;
  font-family: sans-serif;

  /* Not inherited */
  border-top: 10px solid #1098ad;
  /* margin: 0; */
  position: relative;
}

/* we don't need this anymore because the body {} deals with this now. 
h1,
h2,
h3,
h4,
p,
li {
  font-family: sans-serif;
  /* color: #444; 
} 
*/

.container {
  /* width: 100%; */
  width: 900px;
  /* To center this container, we will use auto for left and right margin. 
     This means the margin left should be similar to the margin on the right. 
     This should be the size of screen - container size (900px) - residual/2 - residual/2 
         where residual = size of screen - container size */
  /* margin-left: auto;
  margin-right: auto; */
  /* Again we can write this as short hand */
  margin: 0 auto;
  position: relative;
}

.main-header {
  background-color: #f7f7f7;
  padding: 20px;
  padding-left: 40px;
  padding-right: 40px;
  /* Its better to use shorthand */
  /* padding: 1px 2px 3px 4px; */
  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; This would block our boxmodel on urls. */
}

/* nav a:link,
nav p {
  font-size: 18px;
} */
/* Better with inheritage */
nav {
  font-size: 18px;
  text-align: center;
}

article {
  margin-bottom: 60px;
}

.post-header {
  margin-bottom: 40px;
  position: relative;
}

aside {
  background-color: #f7f7f7;
  /* border is a special property because it uses multiple values 
  (aka we set 3 properties with 1 property so to speak) */
  /* border: 5px solid #1098ad; */
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  /* border-left/right: 5px solid #1098ad; would then be the same as using only border: ...*/

  /* padding-top: 50px;
  padding-bottom: 50px; */
  padding: 50px 0;
  width: 500px;
}

/* ===== SMALLER ELEMENTS */
/* Order is important, because else the header color would be overwritten with the 
color scheme from above. */
h1,
h2,
h3 {
  color: #1098ad;
}

/* Color will be overwriten by internal/inline css */
h1 {
  /* color: pink; */
  font-size: 26px;
  /* font-family: serif; Would overwrite the combined selector.*/
  text-transform: uppercase;
  font-style: italic;
  /* color: rgba(16, 152, 173, 0.466); Using the approach we just learned. 
  If we have multiple notations it will use the last one. */
  color: #1098ad;
}

h2 {
  font-size: 40px;
  /* font-family: sans-serif; */
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  /* font-family: sans-serif; */
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  /* font-family: sans-serif; */
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  /* font-family: sans-serif; */
  line-height: 1.5; /* meaning it has 1.5 times the font size. */
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

/* Notice: we do not style ul/ol elements but li */
li {
  font-size: 20px;
  /* font-family: sans-serif; */
  margin-bottom: 10px;
}

li:last-child {
  margin-bottom: 0;
}

/* Selects all p which are inside of footer (descentend selector). This is not robust atm tho */
/* Again to make it more robust we use classes. */
/* footer p {
  font-size: 16px;
} */

/* This would also change a p inside header which we don't want. */
/* header p {
  font-style: italic;
} */
/* Thus we use a nested decentend selector. This is also not smart,
 since it makes it hard to change code in future. Solvable with class and ID selectors.*/
/* article header p {
  font-style: italic; 
} */
/* Thus BEST way (ID selectors): */
#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

/* I used ID, but he ment we should use a class here because we might add something and
 are prepared for future. In RL we always use class*/
/* #related-posts-list {
  list-style: none;
} */

/* class selector */
/* We select this p 4 times or so, they all apply. We will discuss that a bit later. */
.related-author {
  font-size: 18px;
  font-weight: bold; /* This keyword is used to make it bold.*/
}

/* We did this because it should be semantically a list, but not look like one. */
.related-posts-list {
  list-style: none;
}

body {
  /* background-color: blue; */
}
/* we can do better than this  */
/* .first-li {
  font-weight: bold;
} */
/* We achieve this via pesudo-classes: */
/* li:first-child will select all li elements that are 1. child elments of parent element */
li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

li:nth-child(2) {
  color: red;
}

li:nth-child(even) {
  color: green;
}

/* This wont work since header is the first child of article 
(at least in original setting article-header-p) */
article p:first-child {
  color: red;
}

article p:last-child {
  color: red;
}

/* Styling links */

/* We shouln't use it like this: */
/* a {
  color: #1098ad
} */
/* But with pseudo classes like this: */
a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  /* We never do this in practice, we give them the same color as the link class */
  color: #777;
  color: #1098ad;
}

/* This pseudo class is one of the most important */
a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered; /* We could also use dotted, wavy, double, solid... */
}

/* What it looks like during duration of click */
a:active {
  background-color: #777;
  font-style: italic;
}
/* Acronym for the 4 of above: LVHA  */

/* Resolving conflicts */
/* Highest priority */
#copyright {
  color: red;
}

.copyright {
  color: blue;
}

/* Same priotiy as above, but later in code aka this will be displayed */
.text {
  color: yellow;
}

/* With !important this will be showen, not matter what. NEVER use it tho, 
if we rally can't figure it out its most likely due to complex strucutre. */
footer p {
  color: green !important;
}

/* This will overwrite the specifications in the img tag in HTML */
.post-image {
  /* percentage is the width of the parent, aka 100% = width of parent = width of entire page 
      this is really nice since it adapts as we make the window smaller/larger.*/
  width: 100%;
  height: auto; /* We only need this because we set height in HTML */
}

/* Just a demo. */
/* nav a:link {
  background-color: orangered;
  margin: 20px; /* only left and right margin will be applied. In inspect the box model has 20px on all 4 sides tho. 
  padding: 20px; /* This leads to ugly behaviour, we get no new space so we overlap with upper things 
  display: block; /* this leads to unwatned behaviour as well, since we set header to fixed size. Thats why we should 
  not use fixed heights to elements.
} */
/* li {
  display: inline;
} */

nav a:link {
  margin-right: 30px;
  margin-top: 10px;
  display: inline-block;

  text-align: center; /* wont work because it uses exactly the sapce 
  it needs aka we dont have any space left to center. To solve we need to 
  wrap it and set this in a parent (=nav). */
}

nav a:link:last-child {
  margin-right: 0;
}

/* Its not purely inline, because then this wouldn't work */
.post-image {
  margin: 10px;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;
  cursor: crosshair;

  position: absolute;
  /* top: 0;
  left: 0; */
  /* By default absolut is in relation to the viewpoint. But in most cases we want
  it to be positioned relative to another element. Eg relative to page, not to viewpoint. */
  /* we added position: relative to body for that. But we could also add it to .container 
     for example (but it most be a parent)*/
  bottom: 50px;
  right: 50px;
}

/* Lecture 40 - Pseudo elements*/
h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h2::first-letter {
  font-size: 60px;
}

p::first-line {
  /* color: red; */
}

h3 + p::first-line {
  color: red;
}

h2 {
  /* background-color: orange; Nice temporarly for styling purposes*/
  position: relative;
}

h2::after {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;

  position: absolute;
  top: -10px;
  right: -25px;
}
